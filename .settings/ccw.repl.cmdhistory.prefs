cmdhistory=["(get programmes \\"CTDNA|VZV\\")" "(get-programmes \\"CTDNA|VZV\\")" "(j/query mysql-db\\r\\n         [\\"SELECT * FROM programround WHERE analyteID \= ?\\" 38])" "(j/insert\! mysql-db \:programround {\:programid 99 \:distid 1 \:roundid 2 \:analyteid 99})" "(get-all-analytes)" "(get-last-panel 359)" "(get-sample-pairs 359)" "(rest (get-sample-pairs 359))" "(empty? (rest (get-sample-pairs 359)))" "(get-sample-codes 412)" "(defn labeled-radio [label]\\r\\n  [\:label (radio-button {\:ng-model \\"user.gender\\"} \\"user.gender\\" false label)\\r\\n   (str label \\"    \\")])" "(reduce conj [\:div {\:class \\"btn-group\\"}] (map labeled-radio [\\"male\\" \\"female\\" \\"other\\"]))" "(doc radio-button)" "(html5 (reduce conj [\:div {\:class \\"btn-group\\"}] (map labeled-radio [\\"male\\" \\"female\\" \\"other\\"])))" "(conj [\:my-div {\:blah \\"humbug\\"}] [\:not-my-div \\"not-sure-why\\"])" "(cons [\:my-div {\:blah \\"humbug\\"}] [\:not-my-div \\"not-sure-why\\"])" "(def x \\"blooby\\")" "(let [[text val] x]\\n  (list text\\n        val))" "(def x [\\"blooby\\" \\"bloo\\"])" "(let [[text val] x]\\n  (list text\\n        val))" "(select-options (get-sample-codes 412))" "(map \#(vector % %) (get-sample-codes 412))" "(select-options (map \#(vector % %) (get-sample-codes 412)))" "(select-options \:samplecode1 (map \#(vector % %) (get-sample-codes 412)))" "(drop-down \:samplecode1 (map \#(vector % %) (get-sample-codes 412)))" "(def onemap {\:paircontents \\"HIV-1 Type A/G\\", \:pairtype \\"Duplicate\\", \:samplecode2 \\"HIVRNA10-01\\", \:samplecode1 \\"HIVRNA10-01\\", \:design-id \\"200\\"})" "(names onemap)" "(keys onemap)" "(map \#(get % %2) (keys onemap) onemap)" "(map \#(get %2 %) (keys onemap) onemap)" "(get \:paircontents onemap)" "(get onemap \:paircontents)" "(map \#(get onemap %) (keys onemap))" "(keys onemap)" "(map \#(get onemap %) [\:pairtype \:samplecontent \:samplecode1 \:samplecode2 \:designid \:pairtype])" "(map \#(get onemap %) [\:pairtype \:paircontents \:samplecode1 \:samplecode2 \:designid \:pairtype])" "(map \#(get onemap %) [\:pairtype \:paircontents \:samplecode1 \:samplecode2 \:design-id \:pairtype])" "((fn [x] (vector (map \#(get onemap %) [\:pairtype \:paircontents \:samplecode1 \:samplecode2 \:design-id \:pairtype])) x) onemap)" "((fn [x] (vector (map \#(get x %) [\:pairtype \:paircontents \:samplecode1 \:samplecode2 \:design-id \:pairtype])) x) onemap)" "((fn [x] (map \#(get x %) [\:pairtype \:paircontents \:samplecode1 \:samplecode2 \:design-id \:pairtype]) x) onemap)" "((fn [] (map \#(get onemap [\:pairtype \:paircontents \:samplecode1 \:samplecode2 \:design-id \:pairtype]))))" "((fn [] (map \#(get onemap %) [\:pairtype \:paircontents \:samplecode1 \:samplecode2 \:design-id \:pairtype])))" "((fn [] (vector (map \#(get onemap %) [\:pairtype \:paircontents \:samplecode1 \:samplecode2 \:design-id \:pairtype]))))" "((fn [] (into [] (map \#(get onemap %) [\:pairtype \:paircontents \:samplecode1 \:samplecode2 \:design-id \:pairtype]))))" "((fn [x] (into [] (map \#(get x %) [\:pairtype \:paircontents \:samplecode1 \:samplecode2 \:design-id \:pairtype]))) onemap)" "(conj [\\"INSERT INTO samplepairs (programID, pairtype, pairID, samplecontent, sampleCode1, sampleCode2) SELECT t1.programID, ?, IFNULL(prID, 1), ?, ?, ? FROM (SELECT DISTINCT programID FROM QC_ProposedPanelMembers WHERE designID \= ?)t1 LEFT JOIN (SELECT programID, pairtype, MAX(pairID) + 1 AS prID FROM samplepairs WHERE pairtype \= ? GROUP BY programID, pairtype)t2 ON t1.programID \= t2.programID\\"] ((fn [x] (into [] (map \#(get x %) [\:pairtype \:paircontents \:samplecode1 \:samplecode2 \:design-id \:pairtype]))) onemap))" "(conj \\"INSERT INTO samplepairs (programID, pairtype, pairID, samplecontent, sampleCode1, sampleCode2) SELECT t1.programID, ?, IFNULL(prID, 1), ?, ?, ? FROM (SELECT DISTINCT programID FROM QC_ProposedPanelMembers WHERE designID \= ?)t1 LEFT JOIN (SELECT programID, pairtype, MAX(pairID) + 1 AS prID FROM samplepairs WHERE pairtype \= ? GROUP BY programID, pairtype)t2 ON t1.programID \= t2.programID\\" ((fn [x] (into [] (map \#(get x %) [\:pairtype \:paircontents \:samplecode1 \:samplecode2 \:design-id \:pairtype]))) onemap))" "(cons \\"INSERT INTO samplepairs (programID, pairtype, pairID, samplecontent, sampleCode1, sampleCode2) SELECT t1.programID, ?, IFNULL(prID, 1), ?, ?, ? FROM (SELECT DISTINCT programID FROM QC_ProposedPanelMembers WHERE designID \= ?)t1 LEFT JOIN (SELECT programID, pairtype, MAX(pairID) + 1 AS prID FROM samplepairs WHERE pairtype \= ? GROUP BY programID, pairtype)t2 ON t1.programID \= t2.programID\\" ((fn [x] (into [] (map \#(get x %) [\:pairtype \:paircontents \:samplecode1 \:samplecode2 \:design-id \:pairtype]))) onemap))" "[\\"yes\\" \\"no\\"]" "(vec (cons \\"INSERT INTO samplepairs (programID, pairtype, pairID, samplecontent, sampleCode1, sampleCode2) SELECT t1.programID, ?, IFNULL(prID, 1), ?, ?, ? FROM (SELECT DISTINCT programID FROM QC_ProposedPanelMembers WHERE designID \= ?)t1 LEFT JOIN (SELECT programID, pairtype, MAX(pairID) + 1 AS prID FROM samplepairs WHERE pairtype \= ? GROUP BY programID, pairtype)t2 ON t1.programID \= t2.programID\\" ((fn [x] (into [] (map \#(get x %) [\:pairtype \:paircontents \:samplecode1 \:samplecode2 \:design-id \:pairtype]))) onemap)))" "[\\"INSERT INTO samplepairs (programID, pairtype, pairID, samplecontent, sampleCode1, sampleCode2) SELECT t1.programID, ?, IFNULL(prID, 1), ?, ?, ? FROM (SELECT DISTINCT programID FROM QC_ProposedPanelMembers WHERE designID \= ?)t1 LEFT JOIN (SELECT programID, pairtype, MAX(pairID) + 1 AS prID FROM samplepairs WHERE pairtype \= ? GROUP BY programID, pairtype)t2 ON t1.programID \= t2.programID\\"]" "((fn [x] (into [] (map \#(get x %) [\:pairtype \:paircontents \:samplecode1 \:samplecode2 \:design-id \:pairtype]))) onemap)" "((fn [x] (map \#(get x %) [\:pairtype \:paircontents \:samplecode1 \:samplecode2 \:design-id \:pairtype])) onemap)" "(cons \\"blah\\" ((fn [x] (map \#(get x %) [\:pairtype \:paircontents \:samplecode1 \:samplecode2 \:design-id \:pairtype])) onemap))" "(vector (cons \\"blah\\" ((fn [x] (map \#(get x %) [\:pairtype \:paircontents \:samplecode1 \:samplecode2 \:design-id \:pairtype])) onemap)))" "(into [] (cons \\"blah\\" ((fn [x] (map \#(get x %) [\:pairtype \:paircontents \:samplecode1 \:samplecode2 \:design-id \:pairtype])) onemap)))" "(into [] (cons \\"INSERT INTO samplepairs (programID, pairtype, pairID, samplecontent, sampleCode1, sampleCode2) SELECT t1.programID, ?, IFNULL(prID, 1), ?, ?, ? FROM (SELECT DISTINCT programID FROM QC_ProposedPanelMembers WHERE designID \= ?)t1 LEFT JOIN (SELECT programID, pairtype, MAX(pairID) + 1 AS prID FROM samplepairs WHERE pairtype \= ? GROUP BY programID, pairtype)t2 ON t1.programID \= t2.programID\\" ((fn [x] (map \#(get x %) [\:pairtype \:paircontents \:samplecode1 \:samplecode2 \:design-id \:pairtype])) onemap)))" "(sample-pair-save-statement onemap)" "(j/query [\\"SELECT resultID FROM QC_ProgramResults WHERE programID \= ?\\" 2] \:row-fn \:resultID)" "(j/query [\\"SELECT resultID FROM QC_ProgramResults WHERE programID \= ?\\" 2] \:row-fn \:result-id)" "(j/query [\\"SELECT resultID FROM QC_ProgramResults WHERE programID \= ?\\" 2] \:row-fn \:resultid)" "(j/query [\\"SELECT resultID FROM QC_ProgramResults WHERE programID \= ?\\" 2])" "(j/query mysql-db [\\"SELECT resultID FROM QC_ProgramResults WHERE programID \= ?\\" 2] \:row-fn \:resultid)" "(reduce \#(str % \\", \\") (j/query mysql-db [\\"SELECT resultID FROM QC_ProgramResults WHERE programID \= ?\\" 2] \:row-fn \:resultid))" "(reduce \#(str % \\", \\" %2) (j/query mysql-db [\\"SELECT resultID FROM QC_ProgramResults WHERE programID \= ?\\" 2] \:row-fn \:resultid))" "(reduce \#(str % \\", \\" %2) (j/query mysql-db [\\"SELECT resultID FROM QC_ProgramResults WHERE programID \= ?\\" 312] \:row-fn \:resultid))" "(apply + (map (fn [_] 1) (j/query mysql-db [\\"SELECT resultID FROM QC_ProgramResults WHERE programID \= ?\\" 312] \:row-fn \:resultid)))" "(apply + (map (fn [_] 1) (j/query mysql-db [\\"SELECT resultID FROM QC_ProgramResults WHERE programID \= ?\\" 305] \:row-fn \:resultid)))" "(defn get-result-ids\\n  [program-id]\\n  (str \\"(\\"\\n       (reduce \#(str % \\", \\" %2)\\n               (j/query mysql-db\\n                        [\\"SELECT resultID FROM QC_ProgramResults WHERE programID \= ?\\" program-id]\\n                        \:row-fn \:resultID))\\n       \\")\\"))" "(get-result-ids 305)" "(reduce \#(str % \\", \\" %2)\\r\\n                  (j/query mysql-db\\r\\n                           [\\"SELECT resultID FROM QC_ProgramResults WHERE programID \= ?\\" 305]\\r\\n                           \:row-fn \:resultID))" "(defn get-result-ids\\n  [program-id]\\n  (str \\"(\\"\\n       (reduce \#(str % \\", \\" %2)\\n               (j/query mysql-db\\n                        [\\"SELECT resultID FROM QC_ProgramResults WHERE programID \= ?\\" program-id]\\n                        \:row-fn \:resultid))\\n       \\")\\"))" "(get-result-ids 305)" "(defn update-program-ids\\n  [program-id]\\n  (j/execute\! mysql-db\\n              [\\"UPDATE QC_ProgramResultsData SET programID \= ? WHERE resultID IN ?\\" program-id (get-result-ids program-id)]))" "(update-program-ids 1)" "(str \\"SELECT blah WHERE krah in \\" (get-result-ids 305))" "(defn update-program-ids\\n  [program-id]\\n  (j/execute\! mysql-db\\n              [(str \\"UPDATE QC_ProgramResultsData SET programID \= ? WHERE resultID IN \\" (get-result-ids program-id)) program-id ]))" "(update-program-ids 1)" "(get-result-ids 3)" "(update-program-ids 3)" "(range 461)" "(range 1 461)" "(map update-program-ids (range 1 461))" "(doall (range 30 461))" "(map update-program-ids (doall (range 30 461)))" "(get-result-ids 31)" "(get-result-ids 30)" "(defn get-result-ids\\n  [program-id]\\n  (let [x (j/query mysql-db\\r\\n                        [\\"SELECT resultID FROM QC_ProgramResults WHERE programID \= ?\\" program-id]\\r\\n                        \:row-fn \:resultid)]\\n    (if (empty? x)\\n      \\"(0)\\"\\n      (str \\"(\\" (reduce \#(str % \\", \\" %2) x) \\")\\"))))" "(get-result-ids 31)" "(map update-program-ids (range 30 461))" "(flatten ((1356) (618) (588) (420) (480) (792) (816) (1380) (1368) (1752) (1968) (1200) (1248) (1496) (549) (410) (960) (200) (1590) (1430) (1200) (1030) (708) (480) (1210) (900) (1007) (912) (1596) (300) (462) (350) (610) (160) (64) (40) (140) (306) (1510) (1572) (2076) (2220) (1498) (1710) (1360) (1560) (552) (470) (816) (272) (618) (2100) (1480) (1170) (1270) (650) (580) (1340) (1224) (1308) (1332) (650) (812) (648) (2700) (618) (280) (480) (312) (312) (200) (100) (618) (2010) (1872) (2508) (2676) (1944) (1729) (1910) (1480) (1792) (576) (510) (912) (296) (618) (2160) (1680) (1590) (1560) (693) (640) (888) (300) (1350) (140) (1270) (2904) (2388) (830) (1404) (540) (144) (684) (150) (530) (320) (264) (230) (1372) (1170) (2140) (1810) (3060) (2410) (2640) (2244) (1044) (2050) (1962) (2286) (768) (432) (1008) (368) (840) (2676) (1770) (618) (1780) (1610) (912) (660) (902) (280) (1520) (150) (1370) (3852) (2628) (830) (1404) (520) (1170) (1344) (320) (114) (102) (108) (790) (558) (459) (224) (618) (2110) (1900) (3144) (2270) (2856) (2736) (1936) (1984) (2080) (496) (824) (1248) (528) (1130) (2620) (2180) (870) (840) (336) (972) (460) (1870) (1910) (304) (150) (1660) (1700) (618) (1356) (1408) (4764) (3612) (1290) (2268) (570) (704) (600) (632) (232) (1716) (336) (100) (60) (40) (120) (96) (60) (96) (96) (372) (162) (98) (96) (50) (40) (120) (40) (618) (618) (618) (760) (230) (2370) (2160) (2940) (737) (2940) (3444) (2970) (1872) (2160) (2264) (480) (944) (1208) (592) (1200) (3234) (2300) (990) (456) (420) (1116) (690) (1860) (2220) (350) (180) (1910) (1710) (618) (618) (1548) (1472) (5280) (1280) (1440) (1360) (770) (1404) (510) (2172) (800) (800) (784) (224) (330) (1034) (528) (540) (228) (370) (60) (2630) (2470) (3180) (800) (3230) (3840) (3344) (1792) (2208) (2184) (432) (618) (618) (618) (912) (1280) (600) (1300) (3090) (2520) (1100) (432) (504) (1320) (900) (1720) (2680) (312) (250) (1990) (1764) (618) (618) (976) (864) (864) (192) (180) (378) (912) (1872) (1776) (6396) (1392) (1576) (1580) (920) (1584) (368) (2508) (980) (380) (154) (688) (530) (1674) (1080) (1260) (732) (138) (618) (2730) (2670) (3300) (940) (3370) (1824) (2272) (2224) (392) (618) (618) (618) (1040) (1328) (592) (4020) (1070) (1236) (1080) (564) (588) (4092) (1430) (2680) (1144) (1656) (864) (336) (170) (2130) (3120) (2410) (618) (618) (430) (546) (126) (2150) (984) (904) (912) (200) (240) (424) (618) (618) (1040) (2052) (2420) (6804) (1400) (1624) (1630) (1050) (1518) (312) (2604) (440) (450) (264) (960) (600) (618) (618) (618) (618) (156) (618) (618) (2348) (2110) (2610) (3480) (1130) (3580) (4596) (1290) (1224) (1300) (1704) (1944) (1992) (512) (618) (618) (618) (1112) (1368) (640) (468) (600) (1280) (1730) (1430) (2750) (992) (1528) (872) (618) (224) (140) (1650)))" "(353)" "(flatten [[1356] [618] [588] [420] [480] [792] [816] [1380] [1368] [1752] [1968] [1200] [1248] [1496] [549] [410] [960] [200] [1590] [1430] [1200] [1030] [708] [480] [1210] [900] [1007] [912] [1596] [300] [462] [350] [610] [160] [64] [40] [140] [306] [1510] [1572] [2076] [2220] [1498] [1710] [1360] [1560] [552] [470] [816] [272] [618] [2100] [1480] [1170] [1270] [650] [580] [1340] [1224] [1308] [1332] [650] [812] [648] [2700] [618] [280] [480] [312] [312] [200] [100] [618] [2010] [1872] [2508] [2676] [1944] [1729] [1910] [1480] [1792] [576] [510] [912] [296] [618] [2160] [1680] [1590] [1560] [693] [640] [888] [300] [1350] [140] [1270] [2904] [2388] [830] [1404] [540] [144] [684] [150] [530] [320] [264] [230] [1372] [1170] [2140] [1810] [3060] [2410] [2640] [2244] [1044] [2050] [1962] [2286] [768] [432] [1008] [368] [840] [2676] [1770] [618] [1780] [1610] [912] [660] [902] [280] [1520] [150] [1370] [3852] [2628] [830] [1404] [520] [1170] [1344] [320] [114] [102] [108] [790] [558] [459] [224] [618] [2110] [1900] [3144] [2270] [2856] [2736] [1936] [1984] [2080] [496] [824] [1248] [528] [1130] [2620] [2180] [870] [840] [336] [972] [460] [1870] [1910] [304] [150] [1660] [1700] [618] [1356] [1408] [4764] [3612] [1290] [2268] [570] [704] [600] [632] [232] [1716] [336] [100] [60] [40] [120] [96] [60] [96] [96] [372] [162] [98] [96] [50] [40] [120] [40] [618] [618] [618] [760] [230] [2370] [2160] [2940] [737] [2940] [3444] [2970] [1872] [2160] [2264] [480] [944] [1208] [592] [1200] [3234] [2300] [990] [456] [420] [1116] [690] [1860] [2220] [350] [180] [1910] [1710] [618] [618] [1548] [1472] [5280] [1280] [1440] [1360] [770] [1404] [510] [2172] [800] [800] [784] [224] [330] [1034] [528] [540] [228] [370] [60] [2630] [2470] [3180] [800] [3230] [3840] [3344] [1792] [2208] [2184] [432] [618] [618] [618] [912] [1280] [600] [1300] [3090] [2520] [1100] [432] [504] [1320] [900] [1720] [2680] [312] [250] [1990] [1764] [618] [618] [976] [864] [864] [192] [180] [378] [912] [1872] [1776] [6396] [1392] [1576] [1580] [920] [1584] [368] [2508] [980] [380] [154] [688] [530] [1674] [1080] [1260] [732] [138] [618] [2730] [2670] [3300] [940] [3370] [1824] [2272] [2224] [392] [618] [618] [618] [1040] [1328] [592] [4020] [1070] [1236] [1080] [564] [588] [4092] [1430] [2680] [1144] [1656] [864] [336] [170] [2130] [3120] [2410] [618] [618] [430] [546] [126] [2150] [984] [904] [912] [200] [240] [424] [618] [618] [1040] [2052] [2420] [6804] [1400] [1624] [1630] [1050] [1518] [312] [2604] [440] [450] [264] [960] [600] [618] [618] [618] [618] [156] [618] [618] [2348] [2110] [2610] [3480] [1130] [3580] [4596] [1290] [1224] [1300] [1704] [1944] [1992] [512] [618] [618] [618] [1112] [1368] [640] [468] [600] [1280] [1730] [1430] [2750] [992] [1528] [872] [618] [224] [140] [1650]])" "(reduce \#(str % \\", \\" %2) (flatten [[1356] [618] [588] [420] [480] [792] [816] [1380] [1368] [1752] [1968] [1200] [1248] [1496] [549] [410] [960] [200] [1590] [1430] [1200] [1030] [708] [480] [1210] [900] [1007] [912] [1596] [300] [462] [350] [610] [160] [64] [40] [140] [306] [1510] [1572] [2076] [2220] [1498] [1710] [1360] [1560] [552] [470] [816] [272] [618] [2100] [1480] [1170] [1270] [650] [580] [1340] [1224] [1308] [1332] [650] [812] [648] [2700] [618] [280] [480] [312] [312] [200] [100] [618] [2010] [1872] [2508] [2676] [1944] [1729] [1910] [1480] [1792] [576] [510] [912] [296] [618] [2160] [1680] [1590] [1560] [693] [640] [888] [300] [1350] [140] [1270] [2904] [2388] [830] [1404] [540] [144] [684] [150] [530] [320] [264] [230] [1372] [1170] [2140] [1810] [3060] [2410] [2640] [2244] [1044] [2050] [1962] [2286] [768] [432] [1008] [368] [840] [2676] [1770] [618] [1780] [1610] [912] [660] [902] [280] [1520] [150] [1370] [3852] [2628] [830] [1404] [520] [1170] [1344] [320] [114] [102] [108] [790] [558] [459] [224] [618] [2110] [1900] [3144] [2270] [2856] [2736] [1936] [1984] [2080] [496] [824] [1248] [528] [1130] [2620] [2180] [870] [840] [336] [972] [460] [1870] [1910] [304] [150] [1660] [1700] [618] [1356] [1408] [4764] [3612] [1290] [2268] [570] [704] [600] [632] [232] [1716] [336] [100] [60] [40] [120] [96] [60] [96] [96] [372] [162] [98] [96] [50] [40] [120] [40] [618] [618] [618] [760] [230] [2370] [2160] [2940] [737] [2940] [3444] [2970] [1872] [2160] [2264] [480] [944] [1208] [592] [1200] [3234] [2300] [990] [456] [420] [1116] [690] [1860] [2220] [350] [180] [1910] [1710] [618] [618] [1548] [1472] [5280] [1280] [1440] [1360] [770] [1404] [510] [2172] [800] [800] [784] [224] [330] [1034] [528] [540] [228] [370] [60] [2630] [2470] [3180] [800] [3230] [3840] [3344] [1792] [2208] [2184] [432] [618] [618] [618] [912] [1280] [600] [1300] [3090] [2520] [1100] [432] [504] [1320] [900] [1720] [2680] [312] [250] [1990] [1764] [618] [618] [976] [864] [864] [192] [180] [378] [912] [1872] [1776] [6396] [1392] [1576] [1580] [920] [1584] [368] [2508] [980] [380] [154] [688] [530] [1674] [1080] [1260] [732] [138] [618] [2730] [2670] [3300] [940] [3370] [1824] [2272] [2224] [392] [618] [618] [618] [1040] [1328] [592] [4020] [1070] [1236] [1080] [564] [588] [4092] [1430] [2680] [1144] [1656] [864] [336] [170] [2130] [3120] [2410] [618] [618] [430] [546] [126] [2150] [984] [904] [912] [200] [240] [424] [618] [618] [1040] [2052] [2420] [6804] [1400] [1624] [1630] [1050] [1518] [312] [2604] [440] [450] [264] [960] [600] [618] [618] [618] [618] [156] [618] [618] [2348] [2110] [2610] [3480] [1130] [3580] [4596] [1290] [1224] [1300] [1704] [1944] [1992] [512] [618] [618] [618] [1112] [1368] [640] [468] [600] [1280] [1730] [1430] [2750] [992] [1528] [872] [618] [224] [140] [1650]])\\n        )" "(j/query mysql-db\\n         [\\"SELECT resultID FROM QC_ProgramResultsData WHERE programID \= ?\\" 389] \:row-fn \:resultid)" "(j/query mysql-db\\n         [\\"SELECT resultID FROM QC_ProgramResults WHERE programID \= ?\\" 389] \:row-fn \:resultid)" "(map \#(str \\"'\\" % \\"'\\") (j/query mysql-db\\n                          [\\"SELECT resultID FROM QC_ProgramResults WHERE programID \= ?\\" 389] \:row-fn \:resultid))" "(get-refcodes-with-pairs 38)" "(first (rest (get-refcodes-with-pairs 38)))" "(rest (first (get-refcodes-with-pairs 38)))" "(rest (rest (first (get-refcodes-with-pairs 38))))" "(cons (rest (first (get-refcodes-with-pairs 38))) (rest (get-refcodes-with-pairs 38)))" "(cons (vec (rest (first (get-refcodes-with-pairs 38)))) (rest (get-refcodes-with-pairs 38)))" "(def vals (rest (get-refcodes-with-pairs 38)))" "(def vegs (rest (get-refcodes-with-pairs 38)))" "vegs" "(map \#(vec [\:a {\:href (str \\"/analyte/\\" (first %))} (second %)] (rest (rest %))) vegs)" "(map \#(vector [\:a {\:href (str \\"/analyte/\\" (first %))} (second %)] (rest (rest %))) vegs)" "(map \#(vector [\:a {\:href (str \\"/analyte/\\" (first %))} (second %)] (nth % 3) (nth % 4)) vegs)" "(map \#(vector [\:a {\:href (str \\"/analyte/\\" (first %))} (second %)] (nth % 2) (nth % 3)) vegs)" "(into [] (map \#(vector [\:a {\:href (str \\"/analyte/\\" (first %))} (second %)] (nth % 2) (nth % 3)) vegs))" "(def vacs (into [] (map \#(vector [\:a {\:href (str \\"/analyte/\\" (first %))} (second %)] (nth % 2) (nth % 3)) vegs)))" "(results-to-table vacs)" "(cons (vec (rest (first (get-refcodes-with-pairs 38)))) (rest (get-refcodes-with-pairs 38)))" "(def vegs (rest (get-refcodes-with-pairs 38)))" "(def vacs (into [] (map \#(vector [\:a {\:href (str \\"/analyte/\\" (first %))} (second %)] (nth % 2) (nth % 3)) vegs)))" "(results-to-table vacs)" "(defn linked-first-vector\\r\\n  [result-set]\\r\\n  (cons\\r\\n    (rest (first result-set))\\r\\n    (into [] (map \#(vector [\:a {\:href (str \\"/analyte/\\" (first %))} (second %)] (nth % 2) (nth % 3)) (rest result-set)))))" "(linked-first-vector (get-refcodes-with-pairs 38))" "(def prog-ids (j/query mysql-db [\\"SELECT GROUP_CONCAT(programID) 'id' FROM programround WHERE analyteID \= ?\\" 38] \:row-fn \:id))" "prog-ids" "(get-pids-for-pairs 38 \\"duplicate\\")" "(get-pids-for-pairs 38 'duplicate')" "(get-pids-for-pairs 38 \\"Duplicate\\")" "(get-pids-for-pairs 38 \\"duplicate\\")" "(get-panel-contents 200)" "(field-keywords-to-names (get-panel-contents 200))" "(get-panel-contents 200)" "(map \#(name %) (first (get-panel-contents 200)))" "(nameify-keys (get-panel-contents 200))" "(output-panel)" "(panel-csv)" "(get-pids-for-pairs 38 'duplicate')" "(get-pids-for-pairs 38 \\"Duplicate\\")" "(get-pids-for-pairs 38 \\"duplicate\\")" "(get-pair-query 38 \\"duplicate\\")" "(get-analyte-from-id 38)" "(first (get-analyte-from-id 38))" "(get-pair-query 38 \\"duplicate\\")" "(get-pids-for-pairs 38 \\"dilution\\")" "(get-pair-query 38 \\"duplicate\\")" "(def myvec \\n  [[\\"yes\\" \\"no\\"][\\"always\\" \\"never\\"]])" "(conj \\"blar\\" myvec)" "(conj myvec \\"blar\\")" "(cons \\"blar\\" myvec)" "(vec (cons \\"blar\\" myvec))" "(get-pids-for-negs 29)" "(get-pids-for-pairs 29 \\"duplicate\\")" "(get-pids-for-negs 29)" "(first (get-pids-for-negs 29))" "(get-negatives 29)" "(def myblarg (get-negatives 29))" "(cons \\"bloo\\" [\\"blee\\" \\"blay\\"])" "(conj [\\"blee\\" \\"blay\\"] \\"bloo\\")" "(map \#(conj % \:rabara) myblarg)" "(rest myblarg)" "(def myprog \\n  (rest myblarg))" "'(\\"True negative\\" \\"Specificity negative\\" \\"Not assessed\\")" "(def ddns '(\\"True negative\\" \\"Specificity negative\\" \\"Not assessed\\"))" "(map \#(vector % %) ddns)" "(drop-down 189 (map \#(vector % %) ddns))" "(html5 (drop-down 189 (map \#(vector % %) ddns)))" "(def ddns '(\\"True negative\\" \\"Specificity negative\\" \\"Not assessed\\"))" "(html5 (drop-down 189 (map \#(vector % %) ddns)))" "(str \\"SELECT t1.year, t1.pairID, t2.logres, t3.logres FROM (SELECT i3.year, i2.pairID, i2.sampleCode1, i2.sampleCode2 FROM programround i1 INNER JOIN samplepairs i2 ON i1.programID \= i2.programID LEFT JOIN programmes i3 ON i2.programID \= i3.programID WHERE i1.analyteID \= ? AND i2.pairtype RLIKE ?)t1 \\"\\r\\n                   \\"INNER JOIN (SELECT resultID, sampleCode, quant_log 'logres' FROM IndRes_Score WHERE QualitativeQuantitative RLIKE 'uant' AND program_ID IN (\\" pids \\"))t2 ON t1.sampleCode1 \= t2.sampleCode INNER JOIN \\"\\r\\n                   \\"(SELECT resultID, sampleCode, quant_log 'logres' FROM IndRes_Score WHERE QualitativeQuantitative RLIKE 'uant' AND program_ID IN (\\" pids \\"))t3 ON t1.sampleCode2 \= t3.sampleCode AND t2.resultID \= t3.resultID\\")" "(def pids \\"24, 34, 36\\")" "(str \\"SELECT t1.year, t1.pairID, t2.logres, t3.logres FROM (SELECT i3.year, i2.pairID, i2.sampleCode1, i2.sampleCode2 FROM programround i1 INNER JOIN samplepairs i2 ON i1.programID \= i2.programID LEFT JOIN programmes i3 ON i2.programID \= i3.programID WHERE i1.analyteID \= ? AND i2.pairtype RLIKE ?)t1 \\"\\r\\n                   \\"INNER JOIN (SELECT resultID, sampleCode, quant_log 'logres' FROM IndRes_Score WHERE QualitativeQuantitative RLIKE 'uant' AND program_ID IN (\\" pids \\"))t2 ON t1.sampleCode1 \= t2.sampleCode INNER JOIN \\"\\r\\n                   \\"(SELECT resultID, sampleCode, quant_log 'logres' FROM IndRes_Score WHERE QualitativeQuantitative RLIKE 'uant' AND program_ID IN (\\" pids \\"))t3 ON t1.sampleCode2 \= t3.sampleCode AND t2.resultID \= t3.resultID\\")" "(get-pids-for-pairs 38 \\"duplicate\\")" "(def pids (get-pids-for-pairs 38 \\"duplicate\\"))" "(str \\"SELECT t1.year, t1.pairID, t2.logres, t3.logres FROM (SELECT i3.year, i2.pairID, i2.sampleCode1, i2.sampleCode2 FROM programround i1 INNER JOIN samplepairs i2 ON i1.programID \= i2.programID LEFT JOIN programmes i3 ON i2.programID \= i3.programID WHERE i1.analyteID \= ? AND i2.pairtype RLIKE ?)t1 \\"\\r\\n                   \\"INNER JOIN (SELECT resultID, sampleCode, quant_log 'logres' FROM IndRes_Score WHERE QualitativeQuantitative RLIKE 'uant' AND program_ID IN (\\" pids \\"))t2 ON t1.sampleCode1 \= t2.sampleCode INNER JOIN \\"\\r\\n                   \\"(SELECT resultID, sampleCode, quant_log 'logres' FROM IndRes_Score WHERE QualitativeQuantitative RLIKE 'uant' AND program_ID IN (\\" pids \\"))t3 ON t1.sampleCode2 \= t3.sampleCode AND t2.resultID \= t3.resultID\\")" "(nameify-keywords 29)" "(get-pids-for-pairs 29 \\"duplicate\\")" "(def pids (get-pids-for-pairs 29 \\"duplicate\\"))" "(str \\"SELECT t1.year, t1.pairID, t2.logres, t3.logres FROM (SELECT i3.year, i2.pairID, i2.sampleCode1, i2.sampleCode2 FROM programround i1 INNER JOIN samplepairs i2 ON i1.programID \= i2.programID LEFT JOIN programmes i3 ON i2.programID \= i3.programID WHERE i1.analyteID \= ? AND i2.pairtype RLIKE ?)t1 \\"\\r\\n                   \\"INNER JOIN (SELECT resultID, sampleCode, quant_log 'logres' FROM IndRes_Score WHERE QualitativeQuantitative RLIKE 'uant' AND program_ID IN (\\" pids \\"))t2 ON t1.sampleCode1 \= t2.sampleCode INNER JOIN \\"\\r\\n                   \\"(SELECT resultID, sampleCode, quant_log 'logres' FROM IndRes_Score WHERE QualitativeQuantitative RLIKE 'uant' AND program_ID IN (\\" pids \\"))t3 ON t1.sampleCode2 \= t3.sampleCode AND t2.resultID \= t3.resultID\\")" "(def pids (get-pids-for-pairs 19 \\"duplicate\\"))" "pids" "(map-tag a [b c d])" "(map-tag \:a [b c d])" "(map-tag [\:a] [b c d])" "(map-tag \:a [\:b \:c \:d])" "(radio-button 1 false 1)" "(radio-button 1 1)" "(radio-button 1 false 1)" "(sample-exp 32)" "(results-to-table (field-keywords-to-names (sample-exp 32)))" "(rest (sample-exp 32))" "(def stuff (rest (sample-exp 32)))" "(map \#(vec (conj (rest %) (first %))) stuff)" "(map \#(vec (cons (rest %) (first %))) stuff)" "(map \#(vec (conj (first %) (rest %))) stuff)" "(map \#(into [] (conj (rest %) (first %))) stuff)" "(map \#(into []  (rest %) (first %)) stuff)" "(map \#(into [] (rest %) (first %)) stuff)" "(map \#(into [] (vec (rest %) (first %))) stuff)" "(map \#(into [] (vector (rest %) (first %))) stuff)" "(map \#(into [] (list (rest %) (first %))) stuff)" "(map \#(into [] (conj (rest %) (first %))) stuff)" "(map \#(conj (vector (rest %)) (first %)) stuff)" "(def stuff (rest (sample-exp 32)))" "stuff" "(def stuff (rest (sample-exp 32)))" "stuff" "(map \#(vector (butlast %) (list \\"True negative\\" (radio-button (last %) false \\"true\\") \\"Specificity\\" (radio-button (last %) false \\"specificity\\"))) stuff)" "(map \#(vector (butlast %) (list \\"True negative\\" (radio-button (last %) \\"true\\" false) \\"Specificity\\" (radio-button (last %) \\"specificity\\" false))) stuff)" "(map \#(vector (butlast %) (list \\"True negative\\" (radio-button (last %) false \\"true\\") \\"Specificity\\" (radio-button (last %) false \\"specificity\\"))) stuff)" "(map \#(conj (vector (butlast %)) (list \\"True negative\\" (radio-button (last %) false \\"true\\") \\"Specificity\\" (radio-button (last %) false \\"specificity\\"))) stuff)" "(def marked (map \#(conj (vector (butlast %)) (list \\"True negative\\" (radio-button (last %) false \\"true\\") \\"Specificity\\" (radio-button (last %) false \\"specificity\\"))) stuff))" "(results-to-table marked)" "(def marked (map \#(conj (vector (butlast %)) (list \\"True negative\\" (radio-button (last %) false \\"true\\") \\"Specificity\\" (radio-button (last %) false \\"specificity\\"))) stuff))" "(def stuff (rest (sample-exp 32)))" "(def marked (map \#(conj (vector (butlast %)) (list \\"True negative\\" (radio-button (last %) false \\"true\\") \\"Specificity\\" (radio-button (last %) false \\"specificity\\"))) stuff))" "marked" "(results-to-table marked)" "(def marked (map \#(conj (into [] (butlast %)) (list \\"True negative\\" (radio-button (last %) false \\"true\\") \\"Specificity\\" (radio-button (last %) false \\"specificity\\"))) stuff))" "marked" "(results-to-table marked)" "(sample-exp 32)" "(field-keywords-to-names (sample-exp 32))" "marked" "(def prms {\\"1582\\" \\"true\\", \\"1208\\" \\"specificity\\", \\"1207\\" \\"specificity\\", \\"1205\\" \\"true\\"})" "(partition 2 prms)" "(first (partition 2 prms))" "(first (partition 1 prms))" "(partition 1 prms)" "(first (partition 1 prms))" "(into [] (partition 1 prms))" "(keys prms)" "(map \#(vector (keys %) (vals %)) prms)" "(vals prms)" "(map \#(vec (keys %) (vals %)) prms)" "(map \#(vector % %2) (keys prms) (vals prms))" "(conj [\\"querystring\\"] (map \#(vec (keys %) (vals %)) prms))" "(conj [\\"querystring\\"] (map \#(vector % %2) (keys prms) (vals prms)))" "(vector (map \#(vector % %2) (keys prms) (vals prms)))" "(into [] (map \#(vector % %2) (keys prms) (vals prms)))" "(cons \\"querystring\\" (into [] (map \#(vector % %2) (keys prms) (vals prms))))" "(cons [\\"querystring\\"] (map \#(vector % %2) (keys prms) (vals prms)))" "(cons \\"querystring\\" (map \#(vector % %2) (keys prms) (vals prms)))" "(into [] (cons \\"querystring\\" (map \#(vector % %2) (keys prms) (vals prms))))" "(def stuff {\\"984\\" \\"true\\", \\"3550\\" \\"true\\", \\"1363\\" \\"true\\", \\"1364\\" \\"true\\", \\"28\\" \\"true\\", \\"2890\\" \\"true\\", \\"472\\" \\"true\\", \\"644\\" \\"true\\", \\"3246\\" \\"true\\", \\"1511\\" \\"true\\", \\"3115\\" \\"true\\", \\"4342\\" \\"true\\", \\"186\\" \\"true\\", \\"768\\" \\"true\\", \\"1512\\" \\"true\\", \\"1140\\" \\"true\\", \\"2199\\" \\"true\\", \\"2601\\" \\"true\\", \\"1139\\" \\"true\\", \\"3542\\" \\"true\\", \\"2016\\" \\"true\\", \\"1709\\" \\"true\\"})" "(construct-neg-update (keys stuff) (vals stuff))" "(def prms {\\"1010\\" \\"true\\", \\"4317\\" \\"true\\", \\"671\\" \\"true\\", \\"1400\\" \\"true\\", \\"1008\\" \\"true\\", \\"193\\" \\"specificity\\", \\"776\\" \\"true\\", \\"1399\\" \\"true\\", \\"2624\\" \\"true\\", \\"2040\\" \\"true\\", \\"1128\\" \\"true\\", \\"1546\\" \\"true\\", \\"1130\\" \\"true\\", \\"777\\" \\"true\\", \\"2914\\" \\"true\\", \\"3296\\" \\"true\\", \\"3157\\" \\"specificity\\", \\"2913\\" \\"true\\", \\"3666\\" \\"true\\", \\"666\\" \\"true\\", \\"433\\" \\"true\\", \\"2039\\" \\"true\\", \\"4318\\" \\"true\\", \\"1401\\" \\"true\\", \\"2625\\" \\"true\\", \\"1127\\" \\"true\\", \\"434\\" \\"true\\", \\"2206\\" \\"true\\", \\"664\\" \\"true\\", \\"3665\\" \\"true\\", \\"2207\\" \\"true\\", \\"1698\\" \\"true\\", \\"1129\\" \\"true\\", \\"3156\\" \\"specificity\\", \\"1545\\" \\"true\\", \\"775\\" \\"true\\", \\"778\\" \\"true\\", \\"3297\\" \\"true\\", \\"436\\" \\"true\\", \\"3876\\" \\"true\\", \\"1007\\" \\"true\\", \\"3877\\" \\"true\\", \\"670\\" \\"true\\", \\"1699\\" \\"true\\", \\"1402\\" \\"true\\", \\"1009\\" \\"true\\", \\"435\\" \\"true\\"})" "(construct-neg-update (keys prms) (vals prms))" "(j/db-do-prepared mysql-db [\\"UPDATE QC_ProposedPanelMembers SET negativeType \= ? WHERE sampleID \= ?\\" [\\"true\\" \\"1010\\"] [\\"true\\" \\"4317\\"] [\\"true\\" \\"671\\"] [\\"true\\" \\"1400\\"] [\\"true\\" \\"1008\\"] [\\"specificity\\" \\"193\\"] [\\"true\\" \\"776\\"] [\\"true\\" \\"1399\\"] [\\"true\\" \\"2624\\"] [\\"true\\" \\"2040\\"] [\\"true\\" \\"1128\\"] [\\"true\\" \\"1546\\"] [\\"true\\" \\"1130\\"] [\\"true\\" \\"777\\"] [\\"true\\" \\"2914\\"] [\\"true\\" \\"3296\\"] [\\"specificity\\" \\"3157\\"] [\\"true\\" \\"2913\\"] [\\"true\\" \\"3666\\"] [\\"true\\" \\"666\\"] [\\"true\\" \\"433\\"] [\\"true\\" \\"2039\\"] [\\"true\\" \\"4318\\"] [\\"true\\" \\"1401\\"] [\\"true\\" \\"2625\\"] [\\"true\\" \\"1127\\"] [\\"true\\" \\"434\\"] [\\"true\\" \\"2206\\"] [\\"true\\" \\"664\\"] [\\"true\\" \\"3665\\"] [\\"true\\" \\"2207\\"] [\\"true\\" \\"1698\\"] [\\"true\\" \\"1129\\"] [\\"specificity\\" \\"3156\\"] [\\"true\\" \\"1545\\"] [\\"true\\" \\"775\\"] [\\"true\\" \\"778\\"] [\\"true\\" \\"3297\\"] [\\"true\\" \\"436\\"] [\\"true\\" \\"3876\\"] [\\"true\\" \\"1007\\"] [\\"true\\" \\"3877\\"] [\\"true\\" \\"670\\"] [\\"true\\" \\"1699\\"] [\\"true\\" \\"1402\\"] [\\"true\\" \\"1009\\"] [\\"true\\" \\"435\\"]])" "(update-neg-categories prms)" "(def prms {\\"1010\\" \\"true\\", \\"4317\\" \\"true\\", \\"671\\" \\"true\\", \\"1400\\" \\"true\\", \\"1008\\" \\"true\\", \\"193\\" \\"specificity\\", \\"776\\" \\"true\\", \\"1399\\" \\"true\\", \\"2624\\" \\"true\\", \\"2040\\" \\"true\\", \\"1128\\" \\"true\\", \\"1546\\" \\"true\\", \\"1130\\" \\"true\\", \\"777\\" \\"true\\", \\"2914\\" \\"true\\", \\"3296\\" \\"true\\", \\"3157\\" \\"specificity\\", \\"2913\\" \\"true\\", \\"3666\\" \\"true\\", \\"666\\" \\"true\\", \\"433\\" \\"true\\", \\"2039\\" \\"true\\", \\"4318\\" \\"true\\", \\"1401\\" \\"true\\", \\"2625\\" \\"true\\", \\"1127\\" \\"true\\", \\"434\\" \\"true\\", \\"2206\\" \\"true\\", \\"664\\" \\"true\\", \\"3665\\" \\"true\\", \\"2207\\" \\"true\\", \\"1698\\" \\"true\\", \\"1129\\" \\"true\\", \\"3156\\" \\"specificity\\", \\"1545\\" \\"true\\", \\"775\\" \\"true\\", \\"778\\" \\"true\\", \\"3297\\" \\"true\\", \\"436\\" \\"true\\", \\"3876\\" \\"true\\", \\"1007\\" \\"true\\", \\"3877\\" \\"true\\", \\"670\\" \\"true\\", \\"1699\\" \\"true\\", \\"1402\\" \\"true\\", \\"1009\\" \\"true\\", \\"435\\" \\"true\\"})" "(update-neg-categories prms)" "(def prms {\\"1010\\" \\"true\\", \\"4317\\" \\"true\\", \\"671\\" \\"true\\", \\"1400\\" \\"true\\", \\"1008\\" \\"true\\", \\"193\\" \\"specificity\\", \\"776\\" \\"true\\", \\"1399\\" \\"true\\", \\"2624\\" \\"true\\", \\"2040\\" \\"true\\", \\"1128\\" \\"true\\", \\"1546\\" \\"true\\", \\"1130\\" \\"true\\", \\"777\\" \\"true\\", \\"2914\\" \\"true\\", \\"3296\\" \\"true\\", \\"3157\\" \\"specificity\\", \\"2913\\" \\"true\\", \\"3666\\" \\"true\\", \\"666\\" \\"true\\", \\"433\\" \\"true\\", \\"2039\\" \\"true\\", \\"4318\\" \\"true\\", \\"1401\\" \\"true\\", \\"2625\\" \\"true\\", \\"1127\\" \\"true\\", \\"434\\" \\"true\\", \\"2206\\" \\"true\\", \\"664\\" \\"true\\", \\"3665\\" \\"true\\", \\"2207\\" \\"true\\", \\"1698\\" \\"true\\", \\"1129\\" \\"true\\", \\"3156\\" \\"specificity\\", \\"1545\\" \\"true\\", \\"775\\" \\"true\\", \\"778\\" \\"true\\", \\"3297\\" \\"true\\", \\"436\\" \\"true\\", \\"3876\\" \\"true\\", \\"1007\\" \\"true\\", \\"3877\\" \\"true\\", \\"670\\" \\"true\\", \\"1699\\" \\"true\\", \\"1402\\" \\"true\\", \\"1009\\" \\"true\\", \\"435\\" \\"true\\"})" "(doobrey prms)" "(cons '(j/db-do-prepared mysql-db\\r\\n                    \\"UPDATE QC_ProposedPanelMembers SET negativeType \= ? WHERE sampleID \= ?\\") (doobrey prms))" "(conj '(j/db-do-prepared mysql-db\\r\\n                    \\"UPDATE QC_ProposedPanelMembers SET negativeType \= ? WHERE sampleID \= ?\\") (doobrey prms))" "(conj (doobrey prms) '(j/db-do-prepared mysql-db\\r\\n                    \\"UPDATE QC_ProposedPanelMembers SET negativeType \= ? WHERE sampleID \= ?\\"))" "(conj (doobrey prms) (j/db-do-prepared mysql-db\\r\\n                    \\"UPDATE QC_ProposedPanelMembers SET negativeType \= ? WHERE sampleID \= ?\\"))" "(def prms {\\"1010\\" \\"true\\", \\"4317\\" \\"true\\", \\"671\\" \\"true\\", \\"1400\\" \\"true\\", \\"1008\\" \\"true\\", \\"193\\" \\"specificity\\", \\"776\\" \\"true\\", \\"1399\\" \\"true\\", \\"2624\\" \\"true\\", \\"2040\\" \\"true\\", \\"1128\\" \\"true\\", \\"1546\\" \\"true\\", \\"1130\\" \\"true\\", \\"777\\" \\"true\\", \\"2914\\" \\"true\\", \\"3296\\" \\"true\\", \\"3157\\" \\"specificity\\", \\"2913\\" \\"true\\", \\"3666\\" \\"true\\", \\"666\\" \\"true\\", \\"433\\" \\"true\\", \\"2039\\" \\"true\\", \\"4318\\" \\"true\\", \\"1401\\" \\"true\\", \\"2625\\" \\"true\\", \\"1127\\" \\"true\\", \\"434\\" \\"true\\", \\"2206\\" \\"true\\", \\"664\\" \\"true\\", \\"3665\\" \\"true\\", \\"2207\\" \\"true\\", \\"1698\\" \\"true\\", \\"1129\\" \\"true\\", \\"3156\\" \\"specificity\\", \\"1545\\" \\"true\\", \\"775\\" \\"true\\", \\"778\\" \\"true\\", \\"3297\\" \\"true\\", \\"436\\" \\"true\\", \\"3876\\" \\"true\\", \\"1007\\" \\"true\\", \\"3877\\" \\"true\\", \\"670\\" \\"true\\", \\"1699\\" \\"true\\", \\"1402\\" \\"true\\", \\"1009\\" \\"true\\", \\"435\\" \\"true\\"})" "(update-neg-categories prms)" "(get prms \\"1010\\")" "(get-analytes-negs)" "(def negs (get-analytes-negs))" "(map \#(vec [\:a {\:href (str \\"/data/analyte\\" (get % \:analyteid))} (get % \:analyte)] [\:a {\:href (str \\"/data/catnegs/\\" (get % \:analyteid))} \\"+\\"]))" "(map \#(vec [\:a {\:href (str \\"/data/analyte\\" (get % \:analyteid))} (get % \:analyte)] [\:a {\:href (str \\"/data/catnegs/\\" (get % \:analyteid))} \\"+\\"]) negs)" "(map \#(vector [\:a {\:href (str \\"/data/analyte\\" (get % \:analyteid))} (get % \:analyte)] [\:a {\:href (str \\"/data/catnegs/\\" (get % \:analyteid))} \\"+\\"]) negs)" "(map linkify-analytes (get-analytes-negs))" "(conj [\\"Analyte\\" \\"Negatives\\"] (map linkify-analytes (get-analytes-negs)))" "(cons [\\"Analyte\\" \\"Negatives\\"] (map linkify-analytes (get-analytes-negs)))"]
eclipse.preferences.version=1
